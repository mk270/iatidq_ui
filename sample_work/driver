#!/usr/bin/env python

import sys
import json

from sample_work import SampleOrgTest, DocumentLinks, \
    WorkItems, TestInfo, NoMatchingTest, organisation_ids
import db
import os

import test_mapping

def all_test_ids():
    for k in test_mapping.test_to_kind.keys():
        try:
            t = TestInfo(k)
            yield t.test_id
        except NoMatchingTest:
            continue

def all_org_ids():
    for o in organisation_ids():
        yield o[0]

def run(filename, org_ids, test_ids, create):
    print "test ids:", test_ids
    db.make_db(filename, WorkItems(org_ids, test_ids), create)

if __name__ == '__main__':
    from optparse import OptionParser

    default_filename = db.default_filename()
    org_ids = [ i for i in all_org_ids() ]
    test_ids = [ i for i in all_test_ids() ]

    parser = OptionParser()
    parser.add_option("--filename", dest="filename", action="store",
                      default=default_filename)
    parser.add_option("--org-ids", dest="org_ids", action="store")
    parser.add_option("--test-ids", dest="test_ids", action="store")
    parser.add_option("--update", dest="update", action="store_true",
                      default=False)

    options, rest = parser.parse_args()

    if options.org_ids:
        org_ids = map(int, options.org_ids.split(","))
    if options.test_ids:
        test_ids = map(int, options.test_ids.split(","))
    create = options.update != True

    run(options.filename, org_ids, test_ids, create)
